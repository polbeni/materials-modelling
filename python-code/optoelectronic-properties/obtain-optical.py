import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from matplotlib.collections import LineCollection

def optical_properties_nm(path_direction):
    """
    This function returns the optical properties in function of lengthwave from the data files generated by VASPKIT with the optical poperties simulations
    of Density Functional Theory performed with VASP

    path_direction: the path direction where are the files that we want to use
    """
    n_file = path_direction + 'REFRACTIVE.dat'
    kappa_file = path_direction + 'EXTINCTION.dat'
    alpha_file = path_direction + 'ABSORPTION.dat'
    R_file = path_direction + 'REFLECTIVITY.dat'

    n_data = pd.read_csv(n_file, delim_whitespace=True)
    new_header = n_data.iloc[0] 
    n_data = n_data[1:] 
    n_data.columns = new_header 

    kappa_data = pd.read_csv(kappa_file, delim_whitespace=True)

    alpha_data = pd.read_csv(alpha_file, delim_whitespace=True)

    R_data = pd.read_csv(R_file, delim_whitespace=True)

    n_data.drop(n_data[n_data['#Energy'] == '********'].index, inplace=True)
    kappa_data.drop(kappa_data[kappa_data['#Energy'] == '********'].index, inplace=True)
    alpha_data.drop(alpha_data[alpha_data['#Energy'] == '********'].index, inplace=True)
    R_data.drop(R_data[R_data['#Energy'] == '********'].index, inplace=True)

    n_data_np = n_data.to_numpy()
    kappa_data_np = kappa_data.to_numpy()
    alpha_data_np = alpha_data.to_numpy()
    R_data_np = R_data.to_numpy()

    num_elem = len(n_data_np)

    n = np.zeros(num_elem)
    kappa = np.zeros(num_elem)
    alpha = np.zeros(num_elem)
    R = np.zeros(num_elem)
    wavelength = np.zeros(num_elem)

    n[:] = n_data_np[:,1]
    kappa[:] = kappa_data_np[:,1]
    alpha[:] = alpha_data_np[:,1]
    R[:] = R_data_np[:,1]
    wavelength[:] = n_data_np[:,0]

    return n, kappa, alpha, R, wavelength

def wavelength_to_rgb(wl):
    """
    This function return us the RGB for a given wavelength

    wl: the wavelength of interest
    """
    if ((wl >= 380) and (wl < 440)):
        Red = -(wl - 440) / (440 - 380)
        Green = 0.0
        Blue = 1.0
    elif ((wl >= 440) and (wl < 490)):
        Red = 0.0
        Green = (wl - 440) / (490 - 440)
        Blue = 1.0
    elif ((wl >= 490) and (wl < 510)):
        Red = 0.0
        Green = 1.0
        Blue = -(wl - 510) / (510 - 490)
    elif ((wl >= 510) and (wl < 580)):
        Red = (wl - 510) / (580 - 510)
        Green = 1.0
        Blue = 0.0
    elif ((wl >= 580) and (wl < 645)):
        Red = 1.0
        Green = -(wl - 645) / (645 - 580)
        Blue = 0.0
    elif ((wl >= 645) and (wl < 781)):
        Red = 1.0
        Green = 0.0
        Blue = 0.0
    else:
        Red = 0.0
        Green = 0.0
        Blue = 0.0

    return Red, Green, Blue

def wl_to_energy(wl):
    wl = wl*1e-9 # m
    h = 4.1357e-15 # eV·s
    c = 299792458 # m/s

    energy = (h*c)/wl # eV
    return energy

def energy_to_wl(energy):
    h = 4.1357e-15 # eV·s
    c = 299792458 # m/s

    wl = (h*c)/energy # m
    wl = wl*1e9 # nm
    return wl


path = 'data/T0/'
n, kappa, alpha1, Ref, wavelength1 = optical_properties_nm(path)

path = 'data/T200/'
n, kappa, alpha2, Ref, wavelength2 = optical_properties_nm(path)

energy1 = wl_to_energy(wavelength1)
energy2 = wl_to_energy(wavelength2)

num_energies = np.linspace(1,4,500)
Ref = np.max(alpha1)

plt.figure()
plt.xlim(1.3,3.7)
plt.ylim(6e2,1e6)
plt.yscale('log')
plt.xlabel('$E_{\gamma}$ (eV)')
plt.ylabel('α ($cm^{-1}$)')
for x in range(len(num_energies)-1):
    R, G, B = wavelength_to_rgb(energy_to_wl(num_energies[x]))
    if (R != 0) or (G != 0) or (B != 0):
        plt.fill_between([num_energies[x],num_energies[x+1]], [1.5*np.max(Ref), 1.5*np.max(Ref)], color=(R, G, B), alpha=0.2)
plt.plot(energy1, alpha1, linewidth=3, label='T=0K')
plt.plot(energy2, alpha2, linewidth=3, label='T=200K')
plt.legend()
plt.tight_layout()
plt.savefig('absorption.pdf')