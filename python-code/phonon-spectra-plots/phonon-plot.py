# Pol Ben√≠tez Colominas, 21/08/2023
'''
import numpy as np
import matplotlib.pyplot as plt

def phonon_spectra_data():
    """
    This function generates a numpy array with the phonon spectra data to do
    easy plots with matplotlib

    inputs:
      band_path: path and/or name file of the band.yaml file generated with phonopy
      KPATH_path: path and or name file of the KPATH.phonopy generated by VASPKIT
    """

    return phonon_array, 

'''

import yaml
import numpy as np
import matplotlib.pyplot as plt

# Load the band.yaml file
with open("band.yaml", "r") as file:
    data = yaml.safe_load(file)

num_atoms = data["natom"]
nqpoints = data["nqpoint"]
npaths = data["npath"]
segments_nqpoints = data["segment_nqpoint"]
points_labels = data["labels"]

phonons = np.zeros((nqpoints, num_atoms*3 + 1))
for x in range(nqpoints):
    phonons[x,0] = data["phonon"][x]["distance"]
    for y in range(num_atoms*3):
        phonons[x,y+1] = data["phonon"][x]["band"][y]["frequency"]

vertical_lines = ['False']*(npaths-1)
for x in range(npaths-1):
    if points_labels[x][1] != points_labels[x+1][0]:
        vertical_lines[x] = True
    
x_labels = ['point']*(npaths+1)
for x in range(npaths):
    if x == 0:
        x_labels[0] = points_labels[0][0]
    if  x+1 < npaths:
        if vertical_lines[x] == True:
            x_labels[x+1] = points_labels[x][1] + '|' + points_labels[x+1][0]
        else: 
            x_labels[x+1] = points_labels[x][1]
    else:
        x_labels[x+1] = points_labels[x][1]


plt.figure()
plt.xlabel('Reciprocal space')
plt.ylabel('Frequency (THz)')
plt.xlim((phonons[0,0],phonons[-1,0]))

for x in range(num_atoms*3):
    plt.plot(phonons[:,0], phonons[:,x+1], color='grey', linewidth=.9)

k_point_number = 0
num_segment = 0
distance = 0
for x in segments_nqpoints:
    k_point_number = k_point_number + x
    if vertical_lines[num_segment] == True:
        distance = phonons[k_point_number-1,0]
        plt.axvline(distance, color='black', linewidth=1)
    num_segment = num_segment + 1
    if num_segment >= npaths-1:
        break

x_ticks = [0]*(npaths+1)
k_point_number = 0
element_ticks = 1
for x in segments_nqpoints:
    k_point_number = k_point_number + x
    x_ticks[element_ticks] = phonons[k_point_number-1,0]
    element_ticks = element_ticks + 1

plt.xticks(ticks=x_ticks, labels=x_labels)
plt.savefig('test.pdf')
